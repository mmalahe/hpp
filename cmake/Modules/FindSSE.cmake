# NOTE: this was incorporated verbatim from
# https://github.com/magic-sph/magic/blob/master/cmake/FindSSE.cmake 
# on 2 April 2017 under the GNU GENERAL PUBLIC LICENSE Version 3 of 29 June 2007
# link: https://www.gnu.org/licenses/gpl-3.0.html

# Check if SSE/AVX instructions are available on the machine where
# the project is compiled.

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
   EXEC_PROGRAM(cat ARGS "/proc/cpuinfo" OUTPUT_VARIABLE CPUINFO)
   
   STRING(REGEX REPLACE "^.*(mmx).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "mmx" "${SSE_THERE}" MMX_TRUE)
   IF (MMX_TRUE)
      set(MMX_FOUND true CACHE BOOL "MMX available on host")
   ELSE (MMX_TRUE)
      set(MMX_FOUND false CACHE BOOL "MMX available on host")
   ENDIF (MMX_TRUE)
   
   STRING(REGEX REPLACE "^.*(sse).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "sse" "${SSE_THERE}" SSE_TRUE)
   IF (SSE_TRUE)
      set(SSE_FOUND true CACHE BOOL "SSE available on host")
   ELSE (SSE_TRUE)
      set(SSE_FOUND false CACHE BOOL "SSE available on host")
   ENDIF (SSE_TRUE)

   STRING(REGEX REPLACE "^.*(sse2).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "sse2" "${SSE_THERE}" SSE2_TRUE)
   IF (SSE2_TRUE)
      set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
   ELSE (SSE2_TRUE)
      set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
   ENDIF (SSE2_TRUE)

   # /proc/cpuinfo apparently omits sse3 :(
   STRING(REGEX REPLACE "^.*[^s](sse3).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "sse3" "${SSE_THERE}" SSE3_TRUE)
   IF (NOT SSE3_TRUE)
      STRING(REGEX REPLACE "^.*(T2300).*$" "\\1" SSE_THERE ${CPUINFO})
      STRING(COMPARE EQUAL "T2300" "${SSE_THERE}" SSE3_TRUE)
   ENDIF (NOT SSE3_TRUE)

   STRING(REGEX REPLACE "^.*(ssse3).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "ssse3" "${SSE_THERE}" SSSE3_TRUE)
   IF (SSE3_TRUE OR SSSE3_TRUE)
      set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
   ELSE (SSE3_TRUE OR SSSE3_TRUE)
      set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
   ENDIF (SSE3_TRUE OR SSSE3_TRUE)
   IF (SSSE3_TRUE)
      set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
   ELSE (SSSE3_TRUE)
      set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
   ENDIF (SSSE3_TRUE)

   STRING(REGEX REPLACE "^.*(sse4_1).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "sse4_1" "${SSE_THERE}" SSE41_TRUE)
   IF (SSE41_TRUE)
      set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
   ELSE (SSE41_TRUE)
      set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   ENDIF (SSE41_TRUE)
   
   STRING(REGEX REPLACE "^.*(sse4_2).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "sse4_2" "${SSE_THERE}" SSE42_TRUE)
   IF (SSE42_TRUE)
      set(SSE4_2_FOUND true CACHE BOOL "SSE4.2 available on host")
   ELSE (SSE42_TRUE)
      set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
   ENDIF (SSE42_TRUE)

   STRING(REGEX REPLACE "^.*(avx).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "avx" "${SSE_THERE}" AVX_TRUE)
   IF (AVX_TRUE)
      set(AVX_FOUND true CACHE BOOL "AVX available on host")
   ELSE (AVX_TRUE)
      set(AVX_FOUND false CACHE BOOL "AVX available on host")
   ENDIF (AVX_TRUE)
 
   STRING(REGEX REPLACE "^.*(avx2).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "avx2" "${SSE_THERE}" AVX2_TRUE)
   IF (AVX2_TRUE)
      set(AVX2_FOUND true CACHE BOOL "AVX2 available on host")
   ELSE (AVX2_TRUE)
      set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
   ENDIF (AVX2_TRUE)
   
   STRING(REGEX REPLACE "^.*(fma).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "fma" "${SSE_THERE}" FMA_TRUE)
   IF (FMA_TRUE)
      set(FMA_FOUND true CACHE BOOL "FMA available on host")
   ELSE (FMA_TRUE)
      set(FMA_FOUND false CACHE BOOL "FMA available on host")
   ENDIF (FMA_TRUE)
   
   STRING(REGEX REPLACE "^.*(fma4).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "fma4" "${SSE_THERE}" FMA4_TRUE)
   IF (FMA4_TRUE)
      set(FMA4_FOUND true CACHE BOOL "FMA4 available on host")
   ELSE (FMA4_TRUE)
      set(FMA4_FOUND false CACHE BOOL "FMA4 available on host")
   ENDIF (FMA4_TRUE)

ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
   EXEC_PROGRAM("/usr/sbin/sysctl -n machdep.cpu.features" OUTPUT_VARIABLE
      CPUINFO)
   
   STRING(REGEX REPLACE "^.*[^S](MMX).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "MMX" "${MMX_THERE}" MMX_TRUE)
   IF (MMX_TRUE)
      set(MMX_FOUND true CACHE BOOL "MMX available on host")
   ELSE (MMX_TRUE)
      set(MMX_FOUND false CACHE BOOL "MMX available on host")
   ENDIF (MMX_TRUE)	
   
   STRING(REGEX REPLACE "^.*[^S](SSE).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "SSE" "${SSE_THERE}" SSE_TRUE)
   IF (SSE_TRUE)
      set(SSE_FOUND true CACHE BOOL "SSE available on host")
   ELSE (SSE_TRUE)
      set(SSE_FOUND false CACHE BOOL "SSE available on host")
   ENDIF (SSE_TRUE)	

   STRING(REGEX REPLACE "^.*[^S](SSE2).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "SSE2" "${SSE_THERE}" SSE2_TRUE)
   IF (SSE2_TRUE)
      set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
   ELSE (SSE2_TRUE)
      set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
   ENDIF (SSE2_TRUE)

   STRING(REGEX REPLACE "^.*[^S](SSE3).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "SSE3" "${SSE_THERE}" SSE3_TRUE)
   IF (SSE3_TRUE)
      set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
   ELSE (SSE3_TRUE)
      set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
   ENDIF (SSE3_TRUE)

   STRING(REGEX REPLACE "^.*(SSSE3).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "SSSE3" "${SSE_THERE}" SSSE3_TRUE)
   IF (SSSE3_TRUE)
      set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
   ELSE (SSSE3_TRUE)
      set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
   ENDIF (SSSE3_TRUE)

   STRING(REGEX REPLACE "^.*(SSE4.1).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "SSE4.1" "${SSE_THERE}" SSE41_TRUE)
   IF (SSE41_TRUE)
      set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
   ELSE (SSE41_TRUE)
      set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   ENDIF (SSE41_TRUE)
   
   STRING(REGEX REPLACE "^.*(SSE4.2).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "SSE4.2" "${SSE_THERE}" SSE42_TRUE)
   IF (SSE42_TRUE)
      set(SSE4_2_FOUND true CACHE BOOL "SSE4.2 available on host")
   ELSE (SSE41_TRUE)
      set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
   ENDIF (SSE42_TRUE)

   STRING(REGEX REPLACE "^.*(AVX).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "AVX" "${SSE_THERE}" AVX_TRUE)
   IF (AVX_TRUE)
      set(AVX_FOUND true CACHE BOOL "AVX available on host")
   ELSE (AVX_TRUE)
      set(AVX_FOUND false CACHE BOOL "AVX available on host")
   ENDIF (AVX_TRUE)

   STRING(REGEX REPLACE "^.*(AVX2).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "AVX2" "${SSE_THERE}" AVX2_TRUE)
   IF (AVX2_TRUE)
      set(AVX2_FOUND true CACHE BOOL "AVX2 available on host")
   ELSE (AVX2_TRUE)
      set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
   ENDIF (AVX2_TRUE)
   
   STRING(REGEX REPLACE "^.*(FMA).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "FMA" "${SSE_THERE}" FMA_TRUE)
   IF (FMA_TRUE)
      set(FMA_FOUND true CACHE BOOL "FMA available on host")
   ELSE (FMA_TRUE)
      set(FMA_FOUND false CACHE BOOL "FMA available on host")
   ENDIF (FMA_TRUE)
   
   STRING(REGEX REPLACE "^.*(FMA4).*$" "\\1" SSE_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "FMA4" "${SSE_THERE}" FMA4_TRUE)
   IF (FMA4_TRUE)
      set(FMA4_FOUND true CACHE BOOL "FMA4 available on host")
   ELSE (FMA4_TRUE)
      set(FMA4_FOUND false CACHE BOOL "FMA4 available on host")
   ENDIF (FMA4_TRUE)

ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
   # TODO
   set(MMX_FOUND   true  CACHE BOOL "MMX available on host")
   set(SSE_FOUND   true  CACHE BOOL "SSE available on host")
   set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
   set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
   set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
   set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
   set(AVX_FOUND false CACHE BOOL "AVX available on host")
   set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
   set(FMA_FOUND false CACHE BOOL "FMA available on host")
   set(FMA4_FOUND false CACHE BOOL "FMA4 available on host")
ELSE(CMAKE_SYSTEM_NAME MATCHES "Linux")
   set(MMX_FOUND   true  CACHE BOOL "MMX available on host")
   set(SSE_FOUND   true  CACHE BOOL "SSE available on host")
   set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
   set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
   set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
   set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
   set(AVX_FOUND false CACHE BOOL "AVX available on host")
   set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
   set(FMA_FOUND false CACHE BOOL "FMA available on host")
   set(FMA4_FOUND false CACHE BOOL "FMA4 available on host")
ENDIF(CMAKE_SYSTEM_NAME MATCHES "Linux")

if(NOT SSE_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE on this machine.")
endif(NOT SSE_FOUND)
if(NOT SSE2_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE2 on this machine.")
endif(NOT SSE2_FOUND)
if(NOT SSE3_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE3 on this machine.")
endif(NOT SSE3_FOUND)
if(NOT SSSE3_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSSE3 on this machine.")
endif(NOT SSSE3_FOUND)
if(NOT SSE4_1_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE4.1 on this machine.")
endif(NOT SSE4_1_FOUND)
if(NOT SSE4_2_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE4.2 on this machine.")
endif(NOT SSE4_2_FOUND)
if(NOT AVX_FOUND)
      MESSAGE(STATUS "Could not find hardware support for AVX on this machine.")
endif(NOT AVX_FOUND)
if(NOT AVX2_FOUND)
      MESSAGE(STATUS "Could not find hardware support for AVX2 on this machine.")
endif(NOT AVX2_FOUND)
if(NOT FMA_FOUND)
      MESSAGE(STATUS "Could not find hardware support for FMA on this machine.")
endif(NOT FMA_FOUND)

mark_as_advanced(SSE2_FOUND SSE3_FOUND SSSE3_FOUND SSE4_1_FOUND SSE4_2_FOUND AVX_FOUND AVX2_FOUND FMA_FOUND)

